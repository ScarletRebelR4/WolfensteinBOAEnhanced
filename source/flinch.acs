#define TICS_PER_SECOND 35
#define MAX_PITCH 0.25

// Fixed angle defines.
#define HALF_DEGREE 	0.0013885
#define ONE_DEGREE 		0.002777
#define TEN_DEGREES		0.02777

// Symbolic constants used by RecoverAxis()
#define AXIS_YAW 0
#define AXIS_PITCH 1
#define AXIS_ROLL 2

int previous_health[MAX_PLAYERS];			// Player's health the previous tic.
int cumulative_flinch_angle[MAX_PLAYERS];	// Total amount player's angle has flinched.
int cumulative_flinch_pitch[MAX_PLAYERS];	// Total amount player's pitch has flinched.
int cumulative_flinch_roll[MAX_PLAYERS];	// Total amount player's roll has flinched.
int hit_timer[MAX_PLAYERS];					// Time of last flinch.

// Check whether an actor is alive.
//
function bool IsAlive(int tid)
{
	return GetActorProperty(tid, APROP_Health) > 0;
}

// Retrieve the base strength of player flinches.
//
// The cvar "boa_flinchamount" is constrained between 0.0 (off) and 2.0
// (double flinch amount) to prevent wacky spins incurred by a higher flinch
// amount.
//
function int GetServerFlinchAmount(void)
{
	return FixedMul(FixedClamp(GetCVar("boa_flinchamount"), 0.0, 2.0), 0.025);
}

// Convert an integer to a fixed-point number.
//
function int ToFixed(int n)
{
	return n << 16;
}

// Absolute value of a fixed-point number.
//
function int FixedAbs(int a)
{
	if (a < 0.0) {
		a = -a;
	}
	return a;
}

// Constrain a fixed-point number between a minimum and maximum.
//
function int FixedClamp(int in, int minimun, int maximum)
{
	if (in < minimun) {
		in = minimun;
	}
	else if (in > maximum) {
		in = maximum;
	}
	return in;
}

// Tries to return an view angle to what it was before a flinch.
//
// total -	The cumulative shift for the axis.
//
// axis - 	Axis to recover.
//				0 = yaw
//				1 = pitch
//				2 = roll
//
function int RecoverAxis(int total, int axis)
{
	int abs_total = FixedAbs(total);
	if (abs_total > HALF_DEGREE)
	{
		// Correct the view faster the further away it is from the position before the flinch.
		int step = FixedMul(FixedDiv(abs_total, MAX_PITCH), TEN_DEGREES);

		if (step < ONE_DEGREE) {
			step = ONE_DEGREE;
		}

		if (total < 0.0) {
			step = -step;
		}

		// Recover the current axis by a bit.
		if (axis == AXIS_YAW)
		{
			int angle = GetActorAngle(0);
			SetActorAngle(0, (angle - step) % 1.0);
		}
		else if (axis == AXIS_PITCH)
		{
			int pitch = GetActorPitch(0);
			SetActorPitch(0, FixedClamp(pitch - step, -MAX_PITCH, MAX_PITCH));
		}
		else if (axis == AXIS_ROLL)
		{
			int roll = GetActorRoll(0);
			SetActorRoll(0, (roll - step) % 1.0);
		}
		total -= step;
	}
	else
	{
		total = 0.0;

		// Ensure the roll gets reset exactly to 1.0 as it's obvious when it's off.
		if (axis == AXIS_ROLL && !GetUserVariable(0, "leveltilt")) {
			SetActorRoll(0, 1.0);
		}
	}

	return total;
}


// Initilize flinch variables
script "RecoverView" ENTER
{
	int player_number = PlayerNumber();
	if (player_number >= 0 && player_number < MAX_PLAYERS)
	{
		int i = player_number;

		// Reset angles and timers for new map.
		cumulative_flinch_angle[i] = 0.0;
		cumulative_flinch_pitch[i] = 0.0;
		cumulative_flinch_roll[i] = 0.0;
		hit_timer[i] = Timer();
		SetActorRoll(0, 1.0);
	}
}

// Tries to restore the player's view to what it was before a flinch.
Function void DoFlinchRecovery(void)
{
	int player_number = PlayerNumber();
	if (player_number >= 0 && player_number < MAX_PLAYERS)
	{
		int i = player_number;

		// Only recover player's view if they're alive.
		if (IsAlive(0) && GetServerFlinchAmount() > 0.0 && cumulative_flinch_roll[i] != 0)
		{
			cumulative_flinch_angle[i] = RecoverAxis(cumulative_flinch_angle[i], AXIS_YAW);
			cumulative_flinch_pitch[i] = RecoverAxis(cumulative_flinch_pitch[i], AXIS_PITCH);
			cumulative_flinch_roll[i]  = RecoverAxis(cumulative_flinch_roll[i], AXIS_ROLL);
		}

		// Store player's current health so we can calculate damage in flinch script.
		previous_health[i] = GetActorProperty(0, APROP_Health);
	}
}

script "DoFlinchRecovery_Wrapper" (void)
{
	DoFlinchRecovery();
}

// Calculate a random flinch strength.
//
// Both arguments are expected to be positive with max larger or equal to min.
//
// min - Minimum flinch amount.
// max - Maximum flinch amount.
//
function int RandomFlinchAmount(int minimun, int maximum)
{
	int difference = maximum - minimun;
	int flinch = Random(-difference, difference);
	if (flinch < 0.0)
	{
		flinch -= minimun;
	}
	else
	{
		flinch += minimun;
	}
	return flinch;
}

// Called by player's Pain state. Jerks player's view angles based on received
// damage.
//
script "PlayerFlinch" (int amt)
{
	int flinch = GetServerFlinchAmount() * max(min(amt, 255), 0) / 255; // Random flinch distance.

	int player_number = PlayerNumber();
	if (flinch > 0.0 && player_number >= 0 && player_number < MAX_PLAYERS && IsAlive(0))
	{
		int i = player_number;

		// Calculate damage received.
		int current_health = GetActorProperty(0, APROP_Health);
		int damage = previous_health[i] - current_health;

		// Determine flinch amount based on damage recieved.
		int min_flinch = FixedMul(flinch, 0.5);
		int max_flinch = flinch;
		if (damage >= 40)
		{
			// Big hit, flinch a lot more.
			min_flinch = FixedMul(flinch, 2.0);
			max_flinch = FixedMul(flinch, 4.0);
		}
		else if (damage >= 15)
		{
			// Medium hit, flinch a bit more.
			min_flinch = flinch;
			max_flinch = FixedMul(flinch, 2.0);
		}

		// Store the time of the flinch.
		int last_hit_timer = hit_timer[i];
		hit_timer[i] = Timer();

		// Reduce strength of consecutive flinches to give player a chance to fight back.
		int time_between_hits = hit_timer[i] - last_hit_timer;
		if (time_between_hits < TICS_PER_SECOND)
		{
			int scalar = FixedDiv(ToFixed(time_between_hits), ToFixed(TICS_PER_SECOND));
			min_flinch = FixedMul(min_flinch, scalar);
			max_flinch = FixedMul(max_flinch, scalar);
		}

		// Generate yaw-flinch.
		int flinch_angle = RandomFlinchAmount(min_flinch, max_flinch);
		int angle = (GetActorAngle(0) + flinch_angle) % 1.0;
		ChangeActorAngle(0, angle, true);
		cumulative_flinch_angle[i] += flinch_angle;

		// Generate pitch-flinch (upwards only).
		int flinch_pitch = -Random(min_flinch, FixedMul(max_flinch, 2.0));
		int original_pitch = GetActorPitch(0);
		int pitch = original_pitch + flinch_pitch;
		// Unlike yaw and roll, pitch has a limit we need to maintain.
		pitch = FixedClamp(pitch, -MAX_PITCH, MAX_PITCH);
		ChangeActorPitch(0, pitch, true);
		cumulative_flinch_pitch[i] += FixedClamp(flinch_pitch, -MAX_PITCH - original_pitch, MAX_PITCH - original_pitch);

		// Generate roll-flinch.
		int flinch_roll = RandomFlinchAmount(min_flinch, max_flinch);
		int roll = (GetActorRoll(0) + flinch_roll) % 1.0;
		ChangeActorRoll(0, roll, true);
		cumulative_flinch_roll[i] += flinch_roll;
	}
}