#library "boalib"

#libdefine MAX_PLAYERS 8
#libdefine MAX_VOLUME 127
#libdefine MAX_OBJECTIVES 6
#libdefine MAX_PLAYER_HEALTH 150
#libdefine PLAYER_TAG_OFFSET 1000
#libdefine BRIDGECOUNT 256 // Track sector tags up to 256

global int 1:disable_mutants; //mxd. When set to true, Mutant and MutantMelee will immediately despawn after spawning.
global int 2:disable_big_mutants; //mxd. When set to true, BigMutant1 and BigMutant2 will immediately despawn after spawning.
global int 3:disable_supermutants; //mxd. When set to true, UberMutant and SuperMutant will immediately despawn after spawning.
global int 4:astrostein; //[Ed] When set to true, grenades will change to the Astrostein variant
global int 5:HealthScriptDeactivate;
global int 6:mission_number; //The variable for the mission number
global int 7:zombiemap_available; //The variable for RE secret maps
global int 8:hints_collected; //The variable for RE clues on c3m1
global int 60:time; // Used for day/night transition display on status bar

int playerID;

// Repair action status variable
int repairstate[65536]; // Arbitrarily large to account for most possible line ids

// Wave spawner configuration variables
int maxzones = 10; // How many waves can be set up
int zonestarttid = 100; // Base TID for wave spawn points - wave 1 will add 1, wave 2 will add 2, etc.
int currentzone = 0; // The currently activated wave
int lastzone = 0; // The previous wave (used for fallback spawnpoints if it's night again and no other wave has been triggered)

// CK bridge tracking
bool bridgestatus[BRIDGECOUNT];

#include "zcommon.acs"
#include "functions.acs"
#include "colorgrade.acs"
#include "compass.acs"
#include "droplets.acs"
#include "flinch.acs"
#include "gameplay.acs"
#include "interactive.acs"
#include "messages.acs"
#include "objectives.acs"
#include "tilt.acs"
#include "wavespawn.acs"

#include "utils_cheats.acs"

// Consolidated gameplay loop: moved to ZScript
// Script "BoA_PlayerLoop" ENTER ...

// Uses ZScript to check that a sound exists
function bool PlayMessageSound(int tid, int message)
{
	// Get localized SNDINFO entry for localized voice acting
	str messageKey = StrParam(s:"SND_", s:message);
	str messageEntry = StrParam(l:messageKey);
	int hasSound = StrCmp(messageKey, messageEntry);
	int soundLength = 0;
	if (hasSound != 0)
	{
		soundLength = ScriptCall("Object", "S_GetLength", messageEntry);
	}

	if (!hasSound || soundLength == 0)
	{
		if (GetCVar("boa_debugvoiceovers")) { Log(s:"\cgMissing voiceover: \cjCheck SNDINFO entry and audio file for \cf", s:message, s:"\cj!"); }

		return false;
	}

	if (!tid) { tid = playerID; }

	PlaySound(tid, messageEntry, CHAN_BODY, 1.0, false, ATTN_NONE, false);

	return true;
}

function void AddLabel(int tid, str label)
{
	ScriptCall("ScreenLabelHandler", "Add", tid, StrParam(l:label));
}

function void AddIconLabel(int tid, str label, str icon)
{
	ScriptCall("ScreenLabelHandler", "Add", tid, StrParam(l:label), icon);
}

function void AddKeyLabel(int tid, str key, str name)
{
	ScriptCall("ScreenLabelHandler", "Add", tid, KeyInfo(key, name));
}

function void AddKeyIconLabel(int tid, str key, str name, str icon)
{
	ScriptCall("ScreenLabelHandler", "Add", tid, KeyInfo(key, name), icon);
}

function str KeyInfo(str key, str name)
{
	if (!StrLen(name))
	{
		name = StrParam(s:"CNTRLMNU_", s:key);
	}
	name = StrParam(l:name);

	str keybind = StrParam(s:"+", s:key);
	keybind = StrParam(k:keybind);

	return StrParam(s:name, s:"\n\c[Dark Red]", s:keybind);
}

function str GetKeyMessage(str message, str key, bool inline)
{
	if (inline)
	{
		return StrParam(l:message, s:" (", s:ScriptCall("ACSTools", "GetKeyPressString", key, true, "Dark Gray", "Gray"), s:")\cC");
	}

	return StrParam(l:message, s:"\n", s:ScriptCall("ACSTools", "GetKeyPressString", key, true, "Dark Gray", "Gray"), s:"\cC");
}

function void StartMessage(void)
{
	ACS_NamedExecute("HintMessage", 0, "INTROTEXGEN01", "+use");
}

function void ClearMessage(void)
{
	ScriptCall("MessageBase", "Clear", "INTROTEXGEN01", 20);
}

function void FadeToBlack(int holdtime, int intime, int outtime)
{
	// This stays as a HUDMessage for layering purposes with existing code;
	SetHUDSize(2, 2, True);

	if (holdtime == -1) { holdtime = 9999.0; }
	else { holdtime = holdtime * 1.0 / 35; }

	SetFont("BLACKBG");
	HUDMessageBold(s: "A"; HUDMSG_FADEINOUT, 20, CR_UNTRANSLATED, 1.0, 1.0, holdtime, intime * 1.0 / 35, outtime * 1.0 / 35);
}

function void HideMap(bool onoff)
{
	if (onoff)
	{
		ScriptCall("Overlay", "ACSInit", "BLACKBG", 0, 0, 0, 1.0, 1, 2 | 4 | 64);
		SCriptCall("ZScriptTools", "CloseAutomap");
	}
	else { ScriptCall("Overlay", "ACSInit", "BLACKBG", 1, 0, 0, 1.0, 1, 2 | 4 | 64); }
}

function void Overlay(str graphic, bool onoff)
{
	if (onoff) { ScriptCall("Overlay", "ACSInit", graphic, 0, 0, 0, 1.0); }
	else { ScriptCall("Overlay", "ACSInit", graphic, 1, 0, 0, 1.0); }
}

// Standard script to set up a standard start-of-level cutscene
script "CinematicStart" (void)
{
	GiveInventory("CutsceneEnabled", 1);
	FadeToBlack(0, 0, 70);
	HideMap(true);
	SetPlayerProperty(1, 1, PROP_FROZEN);
}

// Standard script to restore normal play after a cutscene
script "CinematicEnd" (void)
{
	FadeToBlack(140, 70, 70);
	Delay(2 * 35);
	Overlay("MOVIEHUD", false); // Disable the two commonly used overlays automatically
	Overlay("MOVIEHD5", false);
	HideMap(false);
	SetPlayerProperty(1, 0, PROP_FROZEN);
	TakeInventory("CutsceneEnabled", 1);
}