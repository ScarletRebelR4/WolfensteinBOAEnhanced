// Generic "hold-to-activate" script
Script "Activate" (int lineid, int repairtime)
{
	if (!repairtime) { repairtime = 1; }

	int increment = 1;

	if (repairtime < 0) // Using a negative repairtime will set the script to require a certain number of activations instead of a time duration
	{
		repairtime *= -1;
		increment = 35;
	}

	if (repairstate[lineid] < repairtime * 35) // Standard 35 use/script cycles per second
	{
		if (repairstate[lineid] == 0) // Show hint message on first use
		{
			if (increment == 35) { ACS_NamedExecute("HintMessage", 0, "HINTTEXTFIRE", "+attack"); }
			else { ACS_NamedExecute("HintMessage", 0, "HINTTEXTHOLD", "+use"); }
		}

		int step = 80 + 10 * repairstate[lineid] / (repairtime * 35);

		if (step < 80) { step = 80; } // Clamp between 80 and 90
		else if (step > 90) { step = 90; } 

		SetUserVariable(0, "crosshair", step);  // Show progress by changing the crosshair based on hold time
		repairstate[lineid] += increment; // Increment the repair amount
	}

	if (repairstate[lineid] >= repairtime * 35) // If it's fully repaired...
	{
		ClearLineSpecial(); // Clear the line special to prevent further activation

		SetUserVariable(0, "crosshair", 90); // Show progress complete

		Delay(35); // Wait a second before clearing the crosshair (so you have a chance to see the full meter)

		SetUserVariable(0, "crosshair", 0); // Clear the crosshair
		SetUserVariable(0, "crosshairstring", "");

		SetResultValue(1);
	}

	SetResultValue(0);
}